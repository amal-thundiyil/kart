import logging
import os
import subprocess
import sys
import platform
import shlex
import click
import shutil
from pathlib import Path


L = logging.getLogger("kart.help")


def get_renderer():
    """
    Return the appropriate HelpRenderer implementation for the
    current platform.
    """
    if platform.system() == "Windows":
        return WindowsHelpRenderer()

    return PosixHelpRenderer()


class PagingHelpRenderer:
    """
    Interface for a help renderer.

    The renderer is responsible for displaying the help content on
    a particular platform.
    """

    def __init__(self, output_stream=sys.stdout):
        self.output_stream = output_stream

    PAGER = None

    def get_pager_cmdline(self):
        """Gets the suitable pager from the system environment or uses the default PAGER

        Returns:
            str: pager obtained from the system or default PAGER
        """
        pager = self.PAGER
        if "MANPAGER" in os.environ:
            pager = os.environ["MANPAGER"]
        elif "PAGER" in os.environ:
            pager = os.environ["PAGER"]
        return shlex.split(pager)

    def render(self, ctx: click.Context) -> None:
        """Converts the reST doc content to man and sends it to a suitable pager

        Args:
            ctx (click.Context): _description_
        """
        converted_content = self._convert_doc_content(ctx)
        self._send_output_to_pager(converted_content)

    def _send_output_to_pager(self, output: bytes) -> None:
        """Send the output generated by the renderers to a suitable pager

        Args:
            output (bytes): help page output after all processing
        """
        cmdline = self.get_pager_cmdline()
        L.debug("Running command: %s", cmdline)
        p = self._popen(cmdline, stdin=subprocess.PIPE)
        p.communicate(input=output)

    def _popen(self, *args, **kwargs):
        return subprocess.Popen(*args, **kwargs)

    def _convert_doc_content(self, ctx: click.Context) -> bytes:
        """Reads the compiled help page and converts it for the pager

        Args:
            ctx (click.Context): Context of the click command

        Raises:
            click.ClickException: Error when executable required for conversion is not found

        Returns:
            bytes: converted output after additional formatting
        """
        raise NotImplementedError("PagingHelpRenderer cannot convert doc content")


class PosixHelpRenderer(PagingHelpRenderer):
    """
    Render help content on a Posix-like system.  This includes
    Linux and MacOS X.
    """

    PAGER = "less -R"

    def _convert_doc_content(self, ctx: click.Context) -> bytes:
        from kart import prefix

        man_page = Path(prefix) / "help" / f'{ctx.command_path.replace(" ", "-")}.1'
        if not shutil.which("groff"):
            raise click.ClickException("groff not found in PATH")
        cmdline = ["groff", "-m", "man", "-T", "ascii"]
        L.debug("Running command: %s", cmdline)
        p3 = self._popen(
            cmdline,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        groff_output = p3.communicate(input=man_page.read_bytes())[0]
        return groff_output

    def _send_output_to_pager(self, output: bytes) -> None:
        cmdline = self.get_pager_cmdline()
        if not shutil.which(cmdline[0]):
            raise click.ClickException(
                f"Pager {cmdline[0]} not found in PATH, printing raw help."
            )
        L.debug("Running command: %s", cmdline)
        p = self._popen(cmdline, stdin=subprocess.PIPE)
        p.communicate(input=output)


class WindowsHelpRenderer(PagingHelpRenderer):
    """Render help content on a Windows platform."""

    PAGER = "more"

    def _convert_doc_content(self, ctx: click.Context) -> bytes:
        import pdb

        pdb.set_trace()
        from kart import prefix

        text_page = Path(prefix) / "help" / f'{ctx.command_path.replace(" ", "-")}'
        return text_page.read_bytes()

    def _popen(self, *args, **kwargs):
        # Also set the shell value to True.  To get any of the
        # piping to a pager to work, we need to use shell=True.
        kwargs["shell"] = True
        return subprocess.Popen(*args, **kwargs)
